1. Import Mongoose and Define the MongoDB URL: In the db. js file, you
first import the Mongoose library and define the URL to your MongoDB
database. This URL typically follows the format
mongodb://<hostname> :< port>/<databaseName>. In your code,
you've set the URL to 

'mongodb://localhost:27017/mydatabase',

where mydatabase is the name of your MongoDB database.

2. Set Up the MongoDB Connection: Next, you call mongoose. connect ()
to establish a connection to the MongoDB database using the URL and
some configuration options (useNewUrlParser, useUnifiedTopology,
etc.). This step initializes the connection process but does not actually
connect at this point.

3. Access the Default Connection Object: Mongoose maintains a default
connection object representing the MongoDB connection. You retrieve this
object using mongoose.connection, and you've stored it in the variable 
db. This object is what you'll use to handle events and interact with the
database.

4. Define Event Listeners: You define event listeners for the database
connection using methods like .on('connected', ... ),
.on('error', ... ), and .on('disconnected', ... ). These event
listeners allow you to reaet to different states of the database connection.

5. Start Listening for Events: The code is set up to listen for events. When
you call mongoose. connect(), Mongoose starts the connection process.
If the connection is successful, the ' connected' event is triggered, and
you log a message indicating that you're connected to MongoDB. If there's
an error during the connection process, the 'error' event is triggered,
and you log an error message. Similarly, the 'disconnected' event can
be useful for handling situations where the connection is lost.

6. Export the Database Connection: Finally, you export the db object, which
represents the MongoDB connection, so that you can import and use it in
other parts of your Node.js application.

To sum it up, the db. js file acts as a central module that manages the
connection to your MongoDB database using Mongoose. It sets up the
connection, handles connection events, and exports the connection object so
that your Express.js server (or other parts of your application) can use it to
interact with the database. When your server runs, it typically requires or
imports this db. js file to establish the database connection before
handling HTTP requests.


---------------------------------------------------------------------------------------

. What are models or schema?

. Models are like a blueprint of our database

. It's a representation of a specific collection in MongoDB. Like a Person

. Once you have defined a model, you can create, read, update, and delete
documents in the corresponding MongoDB collection.

. Mongoose allows you to define a schema for your documents. A schema is
like a blueprint that defines the structure and data types of your documents
within a collection.

---------------------------------------------------------------------------------------

. What is body-parser?

. bodyParser is a middleware library for Express.js.

. It is used to parse and extract the body of incoming HTTP requests.

. When a client (e.g., a web browser or a mobile app) sends data to a server,
it typically includes that data in the body of an HTTP request.

· This data can be in various formats, such as JSON, form data, or
URL-encoded data. bodyParser helps parse and extract this data from
the request so that you can work with it in your Express.js application.

. bodyParser processes the request body before it reaches your route
handlers, making the parsed data available in the req. body for further
processing.

. bodyParser. json() automatically parses the JSON data from the
request body and converts it into a JavaScript object, which is then stored
in the req. body.

. Express.js uses lots of middleware and to use middleware we use the
app.use()
.

.Install         npm i body-parser
-------------------------------------------
const bodyParser = require('body-parser'); |
app.use(bodyParser.json());                |
-------------------------------------------

----------------------------------------------------------------------------------------
. Send Data from Client to Server

. we need an Endpoint where the client sends data and data needs to be
saved in the database

. we need a method called POST
. Now code the POST method to add the person
. If we send the random values as well Mongoose will not save random
values other than predefined schema
------------------------------------------------------------
newPerson.save((error, savedPerson) => {                   |
if (error) {                                               |
console.error('Error saving person:', error);              |
res.status(500).json({ error: 'Internal server error' });  |
} else {                                                   |
console.log('Data saved');                                 | 
res.status(201).json(savedPerson);                         |
}                                                          |
});                                                        |
------------------------------------------------------------
---------------------------------------------------------------------------------------
. Async and Await

. Nowadays no one uses callback functions like, we used in the POST
methods They look quite complex and also do not give us code readability.
. What actually callback does, callback is a function that is executed just after
the execution of another main function, it means the callback will wait until
its main function is not executed

. Async and await are features in JavaScript that make it easier to work with
asynchronous code, such as network requests, file system operations, or
database queries.
· Using try and catch block
. The try block contains the code for creating a new Person document and
saving it to the database using await newPerson.save().
. If an error occurs during any step, it is caught in the catch block, and an
error response is sent with a 500 Internal Server Error status.
------------------------------------------------------------------------------------
. Async Function (async):

. An async function is a function that is designed to work with
asynchronous operations. You declare a function as async by placing
the async keyword before the function declaration.
. The primary purpose of an async function is to allow you to use the
await keyword inside it, which simplifies working with promises and
asynchronous code.
. Inside an async function, you can use await to pause the execution
of the function until a promise is resolved. This makes the code
appear more synchronous and easier to read.

· Await (await):

. The await keyword is used inside an async function to wait for the
resolution of a promise. It can only be used within an async function.
. When await is used, the function pauses at that line until the promise
is resolved or rejected. This allows you to write code that appears
sequential, even though it's performing asynchronous tasks.
. If the promise is resolved, the result of the promise is returned. If the
promise is rejected, it throws an error that can be caught using
try...catch.

-------------------------------------------------------------------------------------
. GET Methods

. Now Let's suppose the client wants data on all the persons
. So we need an endpoint for that /person

-----------------------------------------------------------------
app.get('/person', async (req, res) => {                        |
try {                                                           |
// Use the Mongoose model to fetch all persons from the         |
database                                                        |
const persons = await Person.find();                            |
// Send the list of persons as a JSON response                  |
res.json(persons);                                              |
} catch (error) {                                               |
console.error('Error fetching persons:', error);                |
res.status(500).json({ error: 'Internal server error' });       |
}                                                               |
});                                                             |
-----------------------------------------------------------------

--------------------------------------------------------------------------------------
Create schema for Menu

. Now create a model for the menu
--------------------------------------------------------- 
const mongoose = require("mongoose");                   |
const menuItemSchema = new mongoose.Schema({            | 
  name: {                                               | 
    type: String,                                       |
    required: true,                                     |
  },                                                    |
  price: {                                              |
    type: Number,                                       |
    required: true,                                     |
  },                                                    |               
  taste: {                                              |
    type: String,                                       | 
    enum: ["sweet", "spicy", "sour"],                   |
    required: true,                                     |
  },                                                    |
  is_drink: {                                           |
    type: Boolean,                                      |
    default: false,                                     |
  },                                                    |
  ingredients: {                                        |
    type: [String],                                     |
    default: [],                                        |
  },                                                    |
  num_sales: {                                          |
    type: Number,                                       |
    default: 0,                                         |
  }                                                     |
});                                                     |
const MenuItem = mongoose.model('MenuItem',             |
menuItemSchema)                                         |
module.exports = MenuItem;                              |
---------------------------------------------------------
------------------------------------------------------------------------------------

* Parametrised API calls

. Now if someone told you to give a list of people who are only waiters
. Then we can create an endpoint like this

· /person/chef
· /person/waiter
· /person/manager

. But this is not the correct method to create as many functions here we can
use parametrized endpoints
. It can be dynamically inserted into the URL when making a request to the
API.
. localhost:3000/person/:work

-->  work =["chef", "waiter", "manager"]
---------------------------------------------------------------------------------------
. Express Router

· We have a lots of Endpoints in a single file server.js
. This makes bad experience in code readability as well as code handling
. Express Router is a way to modularize and organize your route handling
code in an Express.js application.
· So let's create a separate file to manage endpoints /person and /menu
. Express Router is like a traffic cop for your web server
. Express Router helps you organize and manage these pages or endpoints
in your web application. It's like creating separate folders for different types
of tasks.

. Create a folder routes -+ personRoutes.js
-----------------------------------------
const express = require('express');     |
const router = express.Router();        |
// Define routes for /person            |
router.get('/',(req, res) => {          |
// Handle GET /person                   |
})                                      |
router.post('/', (req, res) => {        |
// Handle POST /person                  |
})                                      |
module.exports = router;                |
-----------------------------------------
. Now in server.js we will use this personRoutes
--------------------------------------------------------
// Import the router files                             |
const personRoutes = require('./routes/personRoutes'); |
// Use the routers                                     |
app.use('/person', personRoutes);                      |
--------------------------------------------------------
--------------------------------------------------------------------------------------
. Update Operation

. We will update our person Record, for that we will create an endpoint from
where we are able to update record I
. For Updation we need two things
. Which record we want to update ?
. What exactly we want to update ?
. For update we will use "PUT" method to create a endpoint
. What is a unique identifier in a document in a collection ?
. It's_id which is given by mongodb itself, we will use this to find the
particular record which we want to update
. -> And now we will send the data as same like we did in POST method.
------------------------------------------------------------------
app.put('/person/:id', async (req, res) => {                     |
try {                                                            |
const personId = req.params.id; // Extract the person's ID       |
from the URL parameter                                           |
const updatedPersonData = req.body; // Updated data for the      |
person                                                           |
// Assuming you have a Person model                              |
const updatedPerson = await                                      |
Person.findByIdAndUpdate(personId, updatedPersonData, {          |
new: true, // Return the updated document                        |
runValidators: true, // Run Mongoose validation                  |
});                                                              |
if (!updatedPerson) {                                            |
return res.status(404).json({ error: 'Person not found'})        |
}                                                                |
// Send the updated person data as a JSON response               |
res.json(updatedPerson);                                         |
} catch (error) {                                                |
console.error('Error updating person:', error);                  |
res.status(500).json({ error: 'Internal server error' });        |
}                                                                |
})                                                               |
------------------------------------------------------------------
--------------------------------------------------------------------------------------
. Delete Operation

. We will Delete our person Record, for that we will create an endpoint from
where we are able to delete record
. For Deletion we need one things
o Which record we want to update ?
. For delete we will use DELETE method to create a endpoint
. What is a unique identifier in a document in a collection ?
. It's _id which is given by mongodb itself, we will use this to find the
particular record which we want to delete
------------------------------------------------------------------
app.delete('/person/:id', async (req, res) => {                  |
try {                                                            |
const personId = req.params.id; // Extract the person's ID       |
from the URL parameter                                           |
// Assuming you have a Person model                              |
const deletedPerson = await Person.findByIdAndRemove(personId);  |
if (IdeletedPerson) {                                            |
return res.status(404).json({ error: 'Person not found' });      |
}                                                                |
// Send a success message as a JSON response                     |
res.json({ message: 'Person deleted successfully' });            |
} catch (error) {                                                |
console.error('Error deleting person:', error);                  |
res.status(500).json({ error: 'Internal server error' });        |
}                                                                |
});                                                              |
------------------------------------------------------------------
-------------------------------------------------------------------------------------
. Host MongoDB database

. Now we are running locally MongoDB database.
. All data operation is performed in a local database, so let's host our
database server and make our DB online presence

. MongoDB Atlas provides a Free cluster for users where you can host your
database for free.
. MongoDB Atlas offers a cloud-based platform for hosting MongoDB
databases
. The free tier allows developers to explore and experiment with the database
without incurring any costs.
. https://www.mongodb.com/atlas/database

· Create an account for free (I already have an account )
. Show Step-by-step Process to host MongoDB Atlas
-------------------------------------------------------------------------------------
. Dotenv

. The dotenv module in Node.js is used to manage configuration variables
and sensitive information in your applications.
· It's particularly useful for keeping sensitive data like API keys, database
connection strings, and other environment-specific configurations separate
from your code. T
npm install dotenv
. Create a . env File
. This is where you'll store your environment-specific configuration variables.
. format VAR_NAME=value.
PORT=3000
API_KEY=your-api-key
DB_CONNECTION_STRING=your-db-connection-string

· In your server file (usually the main entry point of your application), require
and configure the dotenv module.
require('dotenv').config();

. Remember to keep your . env file secure and never commit it to a public
version control system like Git, as it may contain sensitive information.
Typically, you should include the . env file in your project's .gitignore file
to prevent accidental commits.

------------------------------------------------------------------------------------
. Test MongoDB Cluster Postman

. Now we can test the MongoDB Cluster and check whether our data is
present or not in the online DB
------------------------------------------------------------------------------------
. Host NodeJS Server

. Now we are going to host our server so that our Application or Endpoints is
accessible to all the user over the Internet.
. We are using localhost and our endpoints are only accessible within our
computer
. We have to make it publicly available, so there are lots of company who
helps us to make our application'run 24*7
. Like, AWS, Google Cloud, etc. but these charge too much amount for our
application
· So we are going to use some free services to host our nodeJS application,
which lots of company provides for developer purpose.
· Like, Heroku, Netlify, Render, etc.

-------------------------------------------------------------------------------------



